name: 'PR Checklist'

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize

permissions:
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate-pr-title:
    name: Validate PR title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            sync
            fix
            feat
            docs
            refactor
            perf
            test
            build
            ci
            chore
            revert

          requireScope: false

          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The pull request title "{title}" didn't match the required format.
            This format won't affect build or deployment (for now).
            But it helps maintainers understand changes and commit history in this repo.

            Valid formats:
            `type: subject`
            `type!: subject` <- Use `!` to indicate important/breaking changes

            Where subject is: A short description of the change
            Where type is: `sync`, `feat`, `fix`, `docs`, `refactor`, `perf`, `test`, `build`, `ci`, `chore`, `revert`

            Refer to: https://github.com/commitizen/conventional-commit-types

            Examples:

            Merging/Syncing between branches:
            - `sync: sync dev into master`

            Fixing, adding features, or tests:
            - `fix: error panic on null`
            - `feat: add new migration script`
            - `feat: add new module`
            - `refactor: refactor circle service`

            Other non-production-code changes:
            - `test: add new test`

            No package-specific changes, or chore/build changes
            - `build: update dependencies`
            - `ci: add new workflow`
            - `chore: update lint caching`

            Reversion of a previous commit:
            - `revert: revert commit 123456` <- Use the scope of the original commit
